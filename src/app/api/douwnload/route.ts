// app/api/download/route.ts
import { NextRequest, NextResponse } from 'next/server';
import JSZip from 'jszip';
import { generateSampleArchitecture } from '@/src/lib/components/InteractiveArchitectureDiagram';

export async function POST(request: NextRequest) {
  try {
    const { architectureData, downloadType, fileType } = await request.json();

    if (downloadType === 'single') {
      // Download single file
      const content = generateFileContent(architectureData, fileType);
      const filename = `${architectureData.title.toLowerCase().replace(/\s+/g, '-')}-${fileType}.${getFileExtension(fileType)}`;
      
      return new NextResponse(content, {
        headers: {
          'Content-Type': getContentType(fileType),
          'Content-Disposition': `attachment; filename="${filename}"`,
        },
      });
    } else {
      // Download ZIP with all files
      const zip = new JSZip();
      
      // Add diagram data
      const diagramContent = JSON.stringify(architectureData.diagram, null, 2);
      zip.file(`diagram.json`, diagramContent);
      
      // Add documentation
      zip.file(`documentation.md`, architectureData.documentation);
      
      // Add risk analysis
      zip.file(`risk-analysis.md`, architectureData.riskAnalysis);
      
      // Add README
      const readmeContent = generateReadme(architectureData);
      zip.file(`README.md`, readmeContent);

      const zipContent = await zip.generateAsync({ type: 'blob' });
      const filename = `${architectureData.title.toLowerCase().replace(/\s+/g, '-')}-complete.zip`;

      return new NextResponse(zipContent, {
        headers: {
          'Content-Type': 'application/zip',
          'Content-Disposition': `attachment; filename="${filename}"`,
        },
      });
    }
  } catch (error) {
    console.error('Download API Error:', error);
    return NextResponse.json(
      { error: 'Failed to generate download', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

function generateFileContent(architectureData: any, fileType: string): string {
  switch (fileType) {
    case 'diagram':
      return JSON.stringify(architectureData.diagram, null, 2);
    case 'documentation':
      return architectureData.documentation;
    case 'risk':
      return architectureData.riskAnalysis;
    default:
      return '';
  }
}

function getFileExtension(fileType: string): string {
  switch (fileType) {
    case 'diagram':
      return 'json';
    case 'documentation':
    case 'risk':
      return 'md';
    default:
      return 'txt';
  }
}

function getContentType(fileType: string): string {
  switch (fileType) {
    case 'diagram':
      return 'application/json';
    case 'documentation':
    case 'risk':
      return 'text/markdown';
    default:
      return 'text/plain';
  }
}

function generateReadme(architectureData: any): string {
  return `# ${architectureData.title}

## Overview
${architectureData.description}

## Estimated Cost
${architectureData.estimatedCost}

## Expected ROI
${architectureData.roi}

## Technologies Used
${architectureData.technologies ? architectureData.technologies.join(', ') : 'N/A'}

## Files Included

### 1. diagram.json
Interactive React Flow diagram data that can be imported into the architecture visualization tool.

### 2. documentation.md
Comprehensive technical documentation covering:
- Architecture overview
- Component details
- Deployment instructions
- Security implementation
- Operational procedures

### 3. risk-analysis.md
Risk assessment and mitigation strategies including:
- Technical risks
- Operational risks
- Financial risks
- Future recommendations

## Usage Instructions

1. **Diagram**: Import \`diagram.json\` into React Flow or compatible visualization tools
2. **Documentation**: Use \`documentation.md\` as your implementation guide
3. **Risk Analysis**: Review \`risk-analysis.md\` for risk mitigation planning

## Support

For questions about this architecture design, please refer to the documentation or contact your system architect.

Generated by Multi-Agent Architecture System
Date: ${new Date().toISOString()}
`;
}
